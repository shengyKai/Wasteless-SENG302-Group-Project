import java.util.Scanner;
import java.util.Random;
import java.io.File;
import java.io.FileWriter;

public class UserScriptGenerator {
    /**
     * Randomly generates the date of birth of the user
     * @return the user's date of birth
     */
    public static String GenerateDOB(Random random) {
        String day = String.valueOf(random.nextInt(27) + 1); // +1 as the day cannot be zero
        String month = String.valueOf(random.nextInt(11) + 1); // +1 as the month cannot be zero
        String year = String.valueOf(random.nextInt(9998) + 1); // +1 as the year cannot be zero
        return year +"-"+ month +"-"+ day;
    }

    /**
     * Randomly generates the phone number of the user
     * @return the user's phone number
     */
    public static String GeneratePhNum(Random random) {
        return "027" + String.valueOf(random.nextInt(8999999) + 1000000);
    }
    
    /**
     * Randomly generates the hashed password
     * @return
     */
    public static String GeneratePassword(Random random) {
        return "autoGeneratedUser";
    }

    /**
     * Randomly generates the email of the user. Appends an number representing
     * the current user being generate to keep each individual email unique
     * @return the user's email
     */
    public static String GenerateEmail(Random random, int counter, String[] fnames) {
        String[] suffixes = {"@gmail.com", "@hotmail.com", "@yahoo.com", "@uclive.ac.nz", "@xtra.co.nz"};
        String emailStart = fnames[random.nextInt(fnames.length)] + fnames[random.nextInt(fnames.length)];
        String counterStr = String.valueOf(counter);
        String suffix = suffixes[random.nextInt(suffixes.length)];
        return emailStart + counterStr + suffix;
    }

    /**
     * Randomly generates the address of the user
     * @return the elements of a location object (user's address) in an array
     */
    public static String[] GenerateAddress(Random random) {
        //predefined lists for the location components
        String[] streetNames = {"Hillary Cresenct", "Elizabeth Street", "Alice Avenue", "Racheal Road", "Peveral Street", "Moorhouse Avenue", "Riccarton Road", "Clyde Road", "Angelic Avenue"};
        String[] cities = {"Dunedin", "Nightcaps", "Gore", "Tapanui", "Wellington", "Christchurch", "Auckland", "Melbourne", "Brisbance", "Sydeny", "Perth", "Darwin", "Alice Springs"};
        String[] regions = {"Otago", "Southland", "Canterbury", "Victoria", "Tasman", "Upper Hutt"};
        String[] countries = {"New Zealand", "Zealand", "Australia", "England", "United Kingdom", "Japan", "Korea", "Singapore", "France", "Germany", "Norway"};
        String[] districts = {"Alpha", "Beta", "Charlie", "Delta", "Echo", "Foxtrot"};

        String streetNum = String.valueOf(random.nextInt(998) + 1);
        String streetName = streetNames[random.nextInt(streetNames.length)];
        String city = cities[random.nextInt(cities.length)];
        String region = regions[random.nextInt(regions.length)];
        String country = countries[random.nextInt(countries.length)];
        String postcode = String.valueOf(random.nextInt(98999) + 1000);
        String district = districts[random.nextInt(districts.length)];
        String[] address = {streetNum, streetName, city, region, country, postcode, district};
        return address;
    }

    /**
     * Clears the console on windows and linux
     */
    public static void Clear() {
        final String ANSI_CLS = "\u001b[2J";
        final String ANSI_HOME = "\u001b[H";
        System.out.print(ANSI_CLS + ANSI_HOME);
        System.out.flush();   
    }

    /**
     * Creates the SQL commands required to insert the user's address into the database
     * @param address the user's address as a list of location elements
     * @return SQL commands for inserting the address
     */
    public static String CreateInsertAddressSQL(String[] address) {
        String insertSQL = "INSERT INTO location(street_number, street_name, city, region, country, post_code, district)\n";
        String valuesSQL = String.format("VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s');\n\n",
        address[0], address[1], address[2], address[3], address[4], address[5], address[6]);
        return insertSQL + valuesSQL;
    }
    
    /**
     * Creates the SQL commands required to insert the user's account into the database
     * @param email the user's email
     * @param password the user's hashed password
     * @return SQL commands for inserting the account
     */
    public static String CreateInsertAccountSQL(String email, String password) {
        String role = "user";
        String insertSQL = "INSERT INTO account (email, role, authentication_code)\n";
        String valuesSQL = String.format("VALUES ('%s', '%s', '%s');\n", email, role, password);
        return insertSQL + valuesSQL;
    }

    /**
     * Creates the SQL commands required to insert the user's account into the database
     * @param streetNum the street number of the user's address
     * @param streetName the street name of the user's address
     * @param email the user's email
     * @return SQL commands for inserting the user
     */
    public static String CreateInsertUsersSQL(Random random, String streetNum, String streetName, String email, String[] fnames, String[] lnames, String[] nicknames, String[] bios) {
        String firstName = fnames[random.nextInt(fnames.length)];
        String middleName = fnames[random.nextInt(fnames.length)];
        String lastName = lnames[random.nextInt(lnames.length)];
        String nickname = nicknames[random.nextInt(nicknames.length)];
        String bio = bios[random.nextInt(bios.length)];
        String phNum = GeneratePhNum(random);
        String dob = GenerateDOB(random);
        String insertSQL = "INSERT INTO user (first_name, middle_name, last_name, nickname, ph_num, dob, bio, userid, address_id)\n";
        String selectSQL = String.format("SELECT '%s', '%s', '%s', '%s', '%s', '%s', '%s', account.userid, location.id\n",
        firstName, middleName, lastName, nickname, phNum, dob, bio);
        String fromSQL = "FROM account, location\n";
        String whereSQL = String.format("WHERE account.email = '%s' AND location.street_number = '%s' AND location.street_name = '%s';\n", 
        email, streetNum, streetName);
        return insertSQL + selectSQL + fromSQL + whereSQL;
    }

    /**
     * Asks the user how many users that want generated
     * @return the number of users to be generated
     */
    public static int GetUsersFromInput(Scanner scanner) {
        int users = 0;
        while (users <= 0) {
            Clear();
            try {
                System.out.println("------------------------------------");
                System.out.println("How many users do you want generated");
                System.out.println("and put into the database?");
                System.out.println("------------------------------------");
                users = Integer.parseInt(scanner.nextLine());
            } catch (Exception e) {
                System.out.println("Please enter a number! (above 0)");
            }
        }
        return users;
    }

    /**
     * Creates the file. If the file already exists, prompts the user to delete
     * the existing file
     * @param filename the name of the file that will be created
     */
    public static void CreateFile(Scanner scanner, String filename) {
        File file = new File(filename);
        try {
            while (!file.createNewFile()) {
                System.out.println(String.format("The file '%s' already exists. Please delete that file to continue", filename));
                System.out.println("Press any key to continue...");
                scanner.nextLine();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    

    /**
     * Main program
     * @param args no arguments should be provided
     */
    public static void main(String[] args) {
        //predefined lists
        String[] fnames = {"Connor", "Josh", "Ella", "Henry", "Kai", "Ben", "Edward", "April", "May", "June", "Emila", "Frank", "Fergus", "Rose", "Jacob", "Jack", "Danielle"};
        String[] lnames = {"Jordan", "Mungus", "Smith", "Johnson", "Williams", "Brown", "Jones", "Garcia", "Davis", "Thomas", "Taylor", "Lee", "Jackson", "Lewis"};
        String[] nicknames = {"Nathan Apple", "EDDDD", "Get Some Sleep", "Protractor", "Cat", "Dog", "Gugu", "Believer", "Posh Petrol Head"};
        String[] bios = {"I enjoy running on the weekends", "Beaches are fun", "Got to focus on my career", "If only I went to a better university", "Read documentation yeah right", "My cats keep me going", "All I need is food"};

        //Instance of random and scanner
        Random random = new Random();
        Scanner scanner = new Scanner(System.in);

        int users = GetUsersFromInput(scanner);
        Clear();

        String filename = "insertUserScript.sql";
        CreateFile(scanner, filename);
        try {
            FileWriter writer = new FileWriter(filename);
            String[] address = GenerateAddress(random);
            writer.write(CreateInsertAddressSQL(address));

            for (int i=0; i < users; i++) {
                //neccessary variable to be generated
                String email = GenerateEmail(random, i, fnames);
                String password = GeneratePassword(random);
                String streetNum = address[0];
                String streetName = address[1];

                Clear();
                System.out.println(String.format("Creating User %d / %d", i+1, users));
                int progress = (int) (((float)(i+1) / (float)users) * 100);
                System.out.println(String.format("Progress: %d%%", progress));
                writer.write(CreateInsertAccountSQL(email, password));
                writer.write(CreateInsertUsersSQL(random, streetNum, streetName, email, fnames, lnames, nicknames, bios));
                writer.write("\n");
            }
            
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}