package org.seng302.datagenerator.utils;

import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

import java.util.Random;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

/**
 * Class providing utility methods for mocking the behaviour of the Random object.
 */
public class RandomTestUtils {

    /**
     * Mock the random integers generated by the mockRandom object to return a set list of integers, to ensure that the
     * tests are deterministic. Every time mockRandom.nextInt() is called with an integer argument as its upper bound,
     * the value of the next sequential integer from the list modulo the upper bound will be returned (so that the
     * return value is never higher than the upper bound). An ArrayIndexException will be thrown if mockRandom.nextInt()
     * is called more times than the number of integer values passed in to the method.
     * @param mockRandom The object to mock return values for.
     * @param values The integers to be used to generate the return values of mockRandom.nextInt() each time it is called.
     */
    public static void setNextIntReturnValues(Random mockRandom, int[] values) {
        when(mockRandom.nextInt(any(Integer.class))).thenAnswer(new Answer<Integer>() {
            private int count = 0;
            public Integer answer(InvocationOnMock invocation) {
                count++;
                int upperLimit = invocation.getArgument(0);
                return values[count-1] % upperLimit;
            }
        });
    }

    /**
     * Mock the random booleans generated by the mockRandom object to return a set list of booleans, to ensure that the
     * tests are deterministic. Every time mockRandom.nextBoolean() is called the next sequential boolean from the list
     * will be returned. An ArrayIndexException will be thrown if mockRandom.nextBoolean is called more times than the
     * number of boolean values passed in to the method.
     * @param mockRandom The object to mock return values for.
     * @param values The boolean to be returned by mockRandom.nextBoolean() each time it is called.
     */
    public static void setNextBooleanReturnValues(Random mockRandom, boolean[] values) {
        when(mockRandom.nextBoolean()).thenAnswer(new Answer<Boolean>() {
            private int count = 0;
            public Boolean answer(InvocationOnMock invocation) {
                count++;
                return values[count-1];
            }
        });
    }
}
